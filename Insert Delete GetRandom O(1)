class RandomizedSet {
public:
    RandomizedSet() {
      //  unordered_set<int> s;
        
    }
    std::unordered_set<int> s;
    
    bool insert(int val) {
       // int v=val;
       // unordered_set<int> s;
        if(s.find(val)!=s.end())
        {
            return false;
        }else
        {
        s.insert(val);
        return true;
        }
        
    }
    
    bool remove(int val) {
        if(s.find(val)!=s.end())
        {
            s.erase(val);
            return true;
        }
        else
        {
        //s.erase(val);
        return false;
        }

        
    }
    
    int getRandom() {
        int index=rand()%s.size();
        auto it= std::begin(s);
        std::advance(it, index);
        
        return *it;
    }
};



--------------------------------------   2nd method ---------------------------------------------------
lass RandomizedSet {
public:
    RandomizedSet() {
      //  unordered_set<int> s;
        
    }
    std::unordered_map<int,int> m;
    vector<int>res;
    
    bool insert(int val) {
       
       // unordered_set<int> s;
        if(m.find(val)!=m.end())
        {
            return false;
        }
        else
        {
            res.push_back(val);
            m[val]=res.size()-1;
        
            return true;
        }
        
    }
    
    bool remove(int val) {
        if(m.find(val)==m.end())
        {
            return false;
        }
        else
        {
            int last=res.back();
            res[m[val]]=res.back();
            res.pop_back();
            m[last]=m[val];
            m.erase(val);

            return true;
        }

        
    }
    
    int getRandom() {
        
        return res[rand()%res.size()];
    }
};
