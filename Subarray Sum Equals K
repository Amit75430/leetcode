class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>m; 
        int size=nums.size();
        int pre_sum[size]; pre_sum[0]=nums[0];
        int pre=0; int count=0;  int sum=0;
        for(int i=1;i<size;i++)
        {
            pre_sum[i]=nums[i]+pre_sum[i-1];
        }
        for(int i=0;i<size;i++)
        {
            if(pre_sum[i]==k)
            {
                count++;
            }
            if(m.find(pre_sum[i]-k)!=m.end())
            {
                count+=m[pre_sum[i]-k]; //1
              //  pre=nums[i];  // 1,2,3,3,4,4 -->11
            }
            m[pre_sum[i]]++;
        }
        return count;
        
        
    }
};
------------------------------------------------ optimised way ------------------------------------------------------------------------------------
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
         unordered_map<int,int> freq;
        int l=nums.size(), sum=0, count=0;
        for(int i=0;i<l;i++)
        {
            sum+=nums[i];
            if(sum==k)  count++;    //if prefix sum is k
            if(freq.find(sum-k)!=freq.end())    count+=freq[sum-k];  //if (sum-k) present and their count
            freq[sum]++;
        }
        return count;
        
        
    }
};
------------------------------------------------------------ 75% Test case passed ----------------------------------------------------------------------
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_set<int>s;
        s.insert(0);
        int pre=0; int count=0; int size=nums.size(); int sum=0;

        for(int i=0;i<size;i++)
        {
            pre+=nums[i]; //1
            if(s.find(pre-k)!=s.end())
            {
                count++; //1
            }
 
            s.insert(pre); //1,-1,
            

        }
        if(nums[size-1]==0)
        {
            count++;
        }
        
        return count;
        
        
    }
};
