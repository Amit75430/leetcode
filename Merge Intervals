class Solution {
public:

    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int s=intervals.size();
        int ss=s-1;
       // vector<vector<int>>ans;
    //    if(s>0)
    //    {
    //       bool sortcols(const vector<int>& v1, const vector<int>& v2)
    //         {
    //                  return v1[1] < v2[1];
    //         }
       
    //         sort(intervals.begin(), intervals.end(), sortcols);
    //    }
      sort(intervals.begin(), intervals.end());

      





     // sort(in.begin(),in.end());
        for(int i=0;i<ss;)
        {
            
            if(intervals[i][1]>=intervals[i+1][0] && intervals[i][1]<=intervals[i+1][1])
            {
                int ee=i+1;
                intervals[i][1]=intervals[i+1][1]; 
             //  intervals.erase( intervals.begin()+ee );
              //  intervals[i+1].erase(intervals[i+1].begin(),intervals[i+1].end());
             //   intervals.erase( std::next( std::begin( intervals ), i+1 ) );
                
             
                vector<vector<int>>::iterator it = intervals.begin();
	// Remove the second vector from a 2-D vector
	            intervals.erase((it +ee));
                //intervals[i+1].erase(intervals[i+1].begin() + 0);
               // intervals[i+1].erase(intervals[i+1].begin() + 1);
            //  intervals.erase( intervals.begin(i+1) + i+1 );
                // intervals.erase(([i][0]));
                // intervals.erase(([i+1][1]));
                //ans[i][0].push_back(intervals[i+1][0]);
               // ans[i][1].push_back(intervals[i+1][1]);
                //   ans[i][0]=intervals[i][0];
                //   ans[i][1]=intervals[i][1];
                // int q=i;
                // while(q<s-2)
                // {
                //     intervals[i+1][0]=intervals[i+2][0];
                //     intervals[i+1][1]=intervals[i+2][1];
                //     q++;
                // }
               //  intervals.pop_back();
               if((intervals[i][1]>=intervals[i+1][0] && intervals[i][1]>intervals[i+1][1]) || intervals[i][1]>=intervals[i+1][0] && intervals[i][1]<=intervals[i+1][1])
               {
                   i++; s--;
               }
                 
            }
            else if(intervals[i][1]>=intervals[i+1][0] && intervals[i][1]>intervals[i+1][1])
            {
                int ee=i+1;
               // intervals[i][1]=intervals[i][1];
                vector<vector<int>>::iterator it = intervals.begin();
	// Remove the second vector from a 2-D vector
	            intervals.erase((it +ee));
                if((intervals[i][1]>=intervals[i+1][0] && intervals[i][1]>intervals[i+1][1])|| intervals[i][1]>=intervals[i+1][0] && intervals[i][1]<=intervals[i+1][1])
               {
                   i++; s--;
               }
                
            }
            
            
        }
        return intervals;

        
    }
};
