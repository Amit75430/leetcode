lass Solution {
public:

    bool search(int index, int i, int j, vector<vector<char>>& board, string word)
    {
        if(index==word.size()) return true;
        // if(i<0 || j<0 || i>=board.size() || j>=board[0].size()) return false;
        if(i<0||i>=board.size()||j<0||j>=board[0].size()||board[i][j]=='*'||board[i][j]!=word[index])
           return false;

        bool result=false;
        if(word[index]==board[i][j])
        {
            board[i][j]='*';
            result= search(index+1,i+1,j,board,word)|| search(index+1,i,j+1,board,word) ||
                   search(index+1,i-1,j,board,word) || search (index+1,i,j-1,board,word);
            board[i][j]=word[index]; // put again correct value into board from "*" to correct value
        }
        return result;


    }
    bool exist(vector<vector<char>>& board, string word) {
        int x=board.size();
        int y=board[0].size();
        int index=0;
        bool result=false;
        reverse(word.begin(), word.end());
        if (count(word.begin(), word.end(), word[0]) > 
                             count(word.begin(), word.end(), word[word.size() - 1])) 
            reverse(word.begin(), word.end());
        for(int i=0;i<x;i++)
        {
            for(int j=0;j<y;j++)
            {
                if(board[i][j]==word[index])
                {
                    if(search(index,i,j,board,word))
                    {
                        return true;
                    }
                }
               
            }
        }
        return result;
    }  
};
